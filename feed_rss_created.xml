<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Software Architect</title><description>A blog about programming and life</description><link>https://daxartio.github.io/blog/</link><atom:link href="https://daxartio.github.io/blog/feed_rss_created.xml" rel="self" type="application/rss+xml" /><language>en</language> <pubDate>Tue, 26 Nov 2024 17:22:06 -0000</pubDate> <lastBuildDate>Tue, 26 Nov 2024 17:22:06 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.15.0</generator> <item> <title>Как работает счётчик ссылок (Rc) в Rust?</title> <author>daxartio</author> <description>&lt;h1 id=&#34;rc-rust&#34;&gt;Как работает счётчик ссылок (Rc) в Rust?&lt;/h1&gt;&lt;p&gt;В этой статье я хочу рассказать, как создать свой Rc на Rust. Для этого мы будем использовать только стандартную библиотеку.Зачем это нужно? Это хорошая практика, чтобы лучше понять, как работает Rc. Разумеется, статья расчитана на тех, кто начинает изучать Rust.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;rc&#34;&gt;Что такое Rc?&lt;/h2&gt;&lt;p&gt;У данных есть владелец (owner). Владелец — это переменная, которая хранит в себе данные.Когда владелец удаляется, данные удаляются из памяти.Удаление происходит автоматически, когда владелец выходит из области видимости.По умолчанию, владелец может быть только один и компилятор нам это гарантирует.&lt;/p&gt;&lt;p&gt;Представим ситуацию, когда есть несколько владельцев.Такое возможно, если у нас есть несколько переменных, которые хранят в себе одни и те же данные, например, структура дерево (Tree).&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;srtuct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Option&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RefCell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Option&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RefCell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Как тогда компилятор будет понимать, когда удалять данные?Для этого мы можем использовать умный указатель Rc.По сути, мы переносим управление памятью в runtime.&lt;/p&gt;&lt;p&gt;Rc — это счетчик ссылок. Он позволяет считать, сколько раз мы используем один и тот же объект.Когда счетчик ссылок становится равным нулю, объект удаляется из памяти. Примерно так работает стандартный Rc.&lt;/p&gt;&lt;h2 id=&#34;_1&#34;&gt;Немного теории&lt;/h2&gt;&lt;p&gt;Для начала, давайте разберем базовые понятия, которые нам понадобятся для создания своего Rc.Rust — это язык протоколов (автор приносит свою терминологию). Протокол — это набор методов, которые должны быть реализованы для определенного типа данных. Подобно magic methods в Python, Rust реализует это через traits, вызывая их (методы) в нужный момент. С помощью traits мы можем переопределить поведение операторов +-/..., добавлять логику при создании/удалении объектов и т.д.&lt;/p&gt;&lt;h3 id=&#34;trait-clone&#34;&gt;Trait Clone&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Clone&lt;/code&gt; — это trait, который позволяет создавать копию объекта (не путать с трейтом &lt;code&gt;Copy&lt;/code&gt;, который копирует по битно на стеке).Мы можешь переопределить метод clone, чтобы создавать якобы копию объекта.Таким образом, компилятор не будет ругаться, что мы пытаемся иметь несколько владельцев, так как мы якобы создаем копию объекта и говорим это компилятоору.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;trait-drop&#34;&gt;Trait Drop&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Drop&lt;/code&gt; — это trait, метод которого вызывается, когда переменная выходит из области видимости.Мы также можем определить метод drop, чтобы выполнять какие-то действия, когда переменная выходит из блока.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// b выходит из области видимости и вызывается метод drop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;trait-derefderefmut&#34;&gt;Trait Deref/DerefMut&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Deref&lt;/code&gt; — это trait, который позволяет нам определить поведение для оператора разыменования.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;fm&#34;&gt;println!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Только синтаскический сахар, чтобы было проще использовать объекты.&lt;/p&gt;&lt;p&gt;&lt;code&gt;DerefMut&lt;/code&gt; — аналогично, только для изменяемых ссылок.&lt;/p&gt;&lt;h3 id=&#34;_2&#34;&gt;Итог&lt;/h3&gt;&lt;p&gt;Возможно вы догадались, что переопределив методы &lt;code&gt;clone&lt;/code&gt; и &lt;code&gt;drop&lt;/code&gt; мы можем создать свой Rc.&lt;/p&gt;&lt;p&gt;Алгоритм будет следующий:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;let a = MyRc::new(val)&lt;/code&gt; — создаем объект и счетчик ссылок равный 1. Важно отметить, что мы создаем наш счетчик и данные в куче, а не на стеке. Подумайте, почему.&lt;/li&gt;&lt;li&gt;&lt;code&gt;a.clone()&lt;/code&gt; — увеличиваем счетчик ссылок и копируем указатель на данные. Счетчик ссылок хранится в структуре Rc.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Drop&lt;/code&gt; — уменьшаем счетчик ссылок и удаляем данные, если счетчик ссылок равен 1.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;_3&#34;&gt;Реализация&lt;/h2&gt;&lt;p&gt;Давайте реализуем наш Rc. Для начала, создадим структуру, которая будет хранить данные и наш счетчик.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;#[repr(C)]&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;MyRcBox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Cell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;usize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;?Sized&lt;/code&gt; — означает, что мы можем использовать любой тип данных, который неизвестен на этапе компиляции.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Cell&lt;/code&gt; — типаж, который позволяет нам изменять данные внутри структуры, даже если она неизменяемая. Работает только с типами, которые реализуют типаж &lt;code&gt;Copy&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;repr(C)&lt;/code&gt; — говорит компилятору, что мы хотим, чтобы данные хранились в памяти в том же порядке, что и в структуре. Не обязательно, но это может быть полезно, если мы хотим взаимодействовать с кодом на других языках.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Теперь, создадим структуру, которая будет хранить указатель на данные и счетчик ссылок.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;NonNull&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRcBox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;NonNull&lt;/code&gt; — это указатель, который гарантирует, что он не равен None.&lt;/p&gt;&lt;p&gt;Теперь, давайте реализуем методы для нашего Rc.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;leak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRcBox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Cell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;into&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Box::leak&lt;/code&gt; — это метод, который позволяет нам получить указатель на данные, которые хранятся в куче.Также данный метод гарантирует, что данные не будут удалены из памяти при выходе из области видимости.Это может привести к утечкам памяти, think about it.&lt;/p&gt;&lt;p&gt;Дальше, реализуем метод &lt;code&gt;clone&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Clone&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_mut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;unsafe&lt;/code&gt; — это ключевое слово, которое говорит компилятору, что мы знаем, что делаем.Разыменовываем указатель, чтобы получить доступ к данным и увеличиваем счетчик ссылок.Обратите внимание, что наш Rc не является потокобезопасным. Можете попробовать реализовать потокобезопасность самостоятельно в качестве упражнения.&lt;/p&gt;&lt;p&gt;Далее определим методы &lt;code&gt;deref&lt;/code&gt;, чтобы можно было использовать оператор разыменования.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Deref&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DerefMut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deref_mut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;mut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;Self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь, реализуем метод &lt;code&gt;drop&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Sized&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Drop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// comment this and memory will leak&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_mut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_raw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Данная конструкция уже знакома вам. Мы уменьшаем счетчик ссылок и удаляем данные, если счетчик ссылок равен 1.Почему 1? Потому что мы создаем объект сразу с счётчиком ссылок равным 1, так как фактически у нас уже есть один владелец. Данные мы удаляем, создавая новую переменную, далее всю работу делает компилятор. При выходе из области видимости, вызывается метод &lt;code&gt;drop&lt;/code&gt; и удаляются данные.&lt;/p&gt;&lt;p&gt;И, наконец, функция &lt;code&gt;main&lt;/code&gt; для проверки. Важно отметить, что мы используем &lt;code&gt;unsafe&lt;/code&gt;, только чтобы вывести данные на экран.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mut&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloned_val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;println!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cloned_val&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;new data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;println!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Changed to {:?}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;println!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;_4&#34;&gt;Заключение&lt;/h2&gt;&lt;p&gt;В этой статье мы рассмотрели, как создать свой Rc на Rust. Мы использовали только стандартную библиотеку и немного теории. Надеюсь, что статья была полезной и вы узнали что-то новое. Теперь вы знаете, как работает Rc и можете использовать эту информацию на собеседованиях.&lt;/p&gt;&lt;h2 id=&#34;_5&#34;&gt;Ссылки&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://gist.github.com/daxartio/6537d0c13e0d1cdb48734bec31cac3f2&#34;&gt;Github gist&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://daxartio.github.io/blog/2024/02/14/custom-rc/</link> <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><source url="https://daxartio.github.io/blog/feed_rss_created.xml">Software Architect</source><guid isPermaLink="true">https://daxartio.github.io/blog/2024/02/14/custom-rc/</guid> <enclosure url="https://daxartio.github.io/blog/assets/images/social/posts/2024-02-14-custom-rc.png" type="image/png" length="49356" /> </item> <item> <title>Python пакеты на Rust-е</title> <author>daxartio</author> <description>&lt;h1 id=&#34;python-rust-&#34;&gt;Python пакеты на Rust-е&lt;/h1&gt;&lt;p&gt;Начинаем делать Python либу на Rust-е.&lt;/p&gt;&lt;p&gt;Я выступал с докладом по этой теме на PiterPy 2023. Видео можно посмотреть &lt;a href=&#34;https://piterpy.com/talks/ea5ad52a85a742a1b81bb4ba616998f1/?referer=%2Fschedule%2Fdays%2F&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Сейчас я хочу текстом описать процесс создания проекта и в будущем возможно будут другие гайды на что стоит обратить внимание при использовании Rust в Python.&lt;/p&gt;&lt;p&gt;Почему Rust? Ведь есть множество других способов написать производительный код. И да, в первую очередь мы используем другой язык программирования, чтобы ускорить Python.&lt;/p&gt;&lt;p&gt;Альтерантивы&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cython&lt;/li&gt;&lt;li&gt;Numba&lt;/li&gt;&lt;li&gt;ctypes — модуль для интеграции с языком С.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Как альтернативу, я бы ещё добавил NumPy и подобные ему инструменты, так как можно сильно ускорить работу программы, начав использовать их.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Самый главный плюс — это Rust. И вот почему...&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;Помимо очевидных плюсов, которые предоставляет данный язык:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;скорость&lt;/li&gt;&lt;li&gt;безопасность&lt;/li&gt;&lt;li&gt;качество&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Это большое сообщество разработчиков и большое количество библиотек. Если у вас возникнут проблемы, скорее всего быстро найдутся умельцы, которые вам помогут.&lt;/p&gt;&lt;p&gt;Самый главный плюс — это готовые библиотеки для интеграции Rust и Python. Используя их, вам не нужно выполнять пляски с бубном. Просто пишите код на одном языке и далее нативно его используете в другом.&lt;/p&gt;&lt;h2 id=&#34;rust&#34;&gt;Когда нужно использовать Rust?&lt;/h2&gt;&lt;p&gt;Как я уже подметил, в первую очередь использовать данный инструмент нужно, если у вас проблемы с производительностью. Сразу бы хотел накинуть такие кейсы для примера:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;сериализация и десериализация данных — например, парсинг JSON&lt;/li&gt;&lt;li&gt;шифрование и дешифрование&lt;/li&gt;&lt;li&gt;конструкции for in и различные вычисления с большим объемом данных&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Зачастую пригодится тем, кто выполняет статистические расчеты в своих проектах. Во всех остальных случаях скорее всего вам нужно решить архитектурно проблему. Например, делать систему масштабируемой.&lt;/p&gt;&lt;p&gt;Плюс Rust можно использовать как DSL для вашей БЛ (бизнес логики). Rust имеет очень сильную систему типов и подскажет вам, если вы допустили ошибку.&lt;/p&gt;&lt;h2 id=&#34;pyo3&#34;&gt;PyO3&lt;/h2&gt;&lt;p&gt;Полное название Pythonium Trioxide. Сейчас самый популярный инструмент для связки Rust и Python, ИМХО.&lt;/p&gt;&lt;p&gt;Предоставляет высокоуровневый интерфейс и вам не нужно задумываться об интеграции Rust кода с Python кодом.&lt;/p&gt;&lt;h2 id=&#34;_1&#34;&gt;Создание проекта&lt;/h2&gt;&lt;p&gt;maturin — пакетный менеджер для Python проектов, которые используют Rust.&lt;/p&gt;&lt;p&gt;Он нужен для создания структуры проекта. Одной командой у нас появляются pyproject.toml, Cargo.toml и Github actions джобы для деплоя нашего проекта на pypi.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;maturin&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;initls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.github/ workflows/ maturin.initsrc/ lib.rspyproject.tomlCargo.toml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;У нас почти все готово, осталось выполнить:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;maturin&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Обратите внимание, что Rust код скомпируется в dev режиме. Ваши бенчмарки будут работать медленнее, чем в release режиме.Чтобы исправить это, нужно выполнить добавить флаг &lt;code&gt;-r&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;maturin&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;develop&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Испольуем модуль в Python просто импортировав его:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;package&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;python&#34;&gt;Python обёртка&lt;/h2&gt;&lt;p&gt;Вы можете рядом держать Python код, чтобы упростить интерфейс использования вашей программы. Также, не мало важно, описать типы, которые необходимы для проверки через mypy, pyright и т.п.&lt;/p&gt;&lt;p&gt;Добавляем в pyproject.toml:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;k&#34;&gt;[tool.maturin]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;package._module&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;И делаем название модуля в Rust:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;#[pymodule]&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_py&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;PyModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;PyResult&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(())&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Таким образом, мы можем импортировать ваш Rust модуль в Python:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_module&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# from . import _module&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Описываем типы в файле &lt;code&gt;package/_module.pyi&lt;/code&gt; и не забываем добавить py.typed в пакет.&lt;/p&gt;&lt;h2 id=&#34;_2&#34;&gt;Публикация&lt;/h2&gt;&lt;p&gt;Для публикации на pypi нужно создать аккаунт на &lt;a href=&#34;https://pypi.org/&#34;&gt;pypi.org&lt;/a&gt;.Далее нужно создать токен и сохранить его в Github secrets под переменной &lt;code&gt;PYPI_API_TOKEN&lt;/code&gt;.maturin сам соберет и опубликует ваш пакет через github actions.&lt;/p&gt;&lt;h2 id=&#34;_3&#34;&gt;Итог&lt;/h2&gt;&lt;p&gt;Мы с вами научились создавать Python библиотеки на Rust (всего две команды). Теперь вы можете писать производительный код и использовать его в своих проектах.PyO3 имеет очень хорошую документацию и вы можете найти ответы на свои вопросы там.В данном гайде я не стал углубляться в детали, потому что мне лень, но буду потихоньку добавлять материал.&lt;/p&gt;&lt;p&gt;Основной минус для меня, что мы не можем использовать весь функционал Rust.Например, мы не можем использовать lifetime проверки, из-за чего код приходится писать по-другому.Также стоит уделить внимание бенчарком, чтобы сделать ваш код максимально быстрым.Многое зависит от размера данных, которые вы обрабатываете и как вы пишите код на Rust.&lt;/p&gt;&lt;h2 id=&#34;_4&#34;&gt;Ссылки&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://piterpy.com/talks/ea5ad52a85a742a1b81bb4ba616998f1/?referer=%2Fschedule%2Fdays%2F&#34;&gt;PiterPy 2023&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pyo3.rs/&#34;&gt;pyo3.rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.maturin.rs/&#34;&gt;www.maturin.rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/daxartio&#34;&gt;daxartio (Danil Akhtarov) · GitHub&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://daxartio.github.io/blog/2023/12/02/pyo3/</link> <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><source url="https://daxartio.github.io/blog/feed_rss_created.xml">Software Architect</source><guid isPermaLink="true">https://daxartio.github.io/blog/2023/12/02/pyo3/</guid> <enclosure url="https://daxartio.github.io/blog/assets/images/social/posts/2023-11-02-pyo3.png" type="image/png" length="35228" /> </item> <item> <title>Python Project Template</title> <author>daxartio</author> <description>&lt;h1 id=&#34;python-project-template&#34;&gt;Python Project Template&lt;/h1&gt;&lt;p&gt;Иметь свои шаблон необходимо, но стоит сразу обратить внимание на то, что нужно добавлять туда, а что нет. В этой статье я расскажу какие преимущества использования шаблона проекта для Python и как его создать с помощью cookiecutter. Также я расскажу про структуру проекта и какие инструменты я использую в своем шаблоне и почему.&lt;/p&gt;&lt;p&gt;Создание шаблона проекта позволяет сэкономить время на настройку проекта, а также сделать его структуру более удобной для разработки. Базовые рутинные вещи должны быть вынесены в шаблон, например, конфигурация линтеров, иначе они будут переходить из проекта в проект, тянув за собой все исторические моменты предыдущего. Если вы хотите всегда держать уровень своих проектов, то вам следует сделать шаблон, который будет использоваться в будущем.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2 id=&#34;cookiecutter&#34;&gt;Cookiecutter&lt;/h2&gt;&lt;p&gt;Пару слов про &lt;a href=&#34;https://cookiecutter.readthedocs.io/en/stable/&#34;&gt;cookiecutter&lt;/a&gt;. Это инструмент, который позволяет создавать проекты из шаблонов. Шаблон представляет собой git репозиторий, в котором есть файл &lt;code&gt;cookiecutter.json&lt;/code&gt;, в котором описаны переменные, которые нужно будет заполнить при создании проекта. После заполнения переменных cookiecutter клонирует репозиторий и заменяет переменные на значения, которые вы ввели. Также cookiecutter может запустить скрипты, которые могут сделать какие-то дополнительные действия. Например, cookiecutter может создать git репозиторий, установить зависимости, запустить тесты, удалить лишние файлы и т.д.&lt;/p&gt;&lt;p&gt;Фичи, который мне не хватает это группа настроек. Например, я хочу сделать группу настроек для линтеров, чтобы можно было выбрать какие линтеры использовать или не использовать их вообще. Возможно в будущем такая фича появится.&lt;/p&gt;&lt;h2 id=&#34;_1&#34;&gt;Что должно быть в шаблоне?&lt;/h2&gt;&lt;p&gt;Во-первых, нужно определиться для каких целей вам нужен шаблон проекта. Это может быть back-end приложение, библиотека или какая-нибудь игра. Я буду рассказывать только про шаблон для библиотеки.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Библиотеки Python — это файлы с шаблонами кода. Их создали для того, чтобы люди не набирали каждый раз заново один и тот же код.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Дальше определеитесь с набором инструментов, которые вы постоянно используете или хотели бы использовать. Это могут быть базовые библиотеки для проверки кода или запуска тестов. У этих ребят (&lt;a href=&#34;https://github.com/PyCQA&#34;&gt;PyCQA&lt;/a&gt;) есть то, что может вас заинтересовать.&lt;/p&gt;&lt;p&gt;Что еще можно добавить в проект:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;mypy&lt;/li&gt;&lt;li&gt;black&lt;/li&gt;&lt;li&gt;pyright&lt;/li&gt;&lt;li&gt;ruff&lt;/li&gt;&lt;li&gt;pytest&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;_2&#34;&gt;Пример готового шаблона&lt;/h2&gt;&lt;p&gt;Я в какой-то момент захотел сделать свой шаблон проекта для Python. Вы можете найти его &lt;a href=&#34;https://github.com/daxartio/python-project-template&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Причина почему я сделал свой шаблон проекта, а не использовал готовый, заключается в том, что я хотел сделать его максимально простым и удобным для себя.&lt;/p&gt;&lt;p&gt;Что я хотел видеть в шаблоне проекта:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Проверка кода: mypy, black&lt;/li&gt;&lt;li&gt;Запуск тестов: pytest&lt;/li&gt;&lt;li&gt;Публикация пакета в PyPI&lt;/li&gt;&lt;li&gt;Публикация документации на Github Pages&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;_3&#34;&gt;Автоматические релизы&lt;/h3&gt;&lt;p&gt;Этот процесс рутинный и его надо автоматизировать! Разработчики часто не хотят делать релизы, потому что нужно читать инструкции и делать все в правильном порядке. Потратив немного времени на атоматизации, вы сможете сэкономить намного больше в будущем.&lt;/p&gt;&lt;p&gt;Я эксперементировал с разными инструментами и добавлял их в шаблон проекта. Начинал с git-changelog, auto-changelog, gitlint и бампил версию с помощью poetry. Все это находилось в одной инструкции &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;changelog&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;changelog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;auto-changelog&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-v&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;v&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bump&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;bump&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;poetry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;version&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;v&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;make&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;changelog&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;v&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;add&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;commit&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;bump: version &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;v&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tag&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-m&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;v&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Я случайно наткнулся на &lt;a href=&#34;https://github.com/commitizen-tools/commitizen&#34;&gt;commitizen&lt;/a&gt;. Люблю github, всегда предлагает интересные проекты, а я их смотрю вместо постов из какой-либо сети.&lt;/p&gt;&lt;p&gt;Commitizen — тулза для автоматического изменения версии проекта в разных файлах, changelog-а и созданием тега в git. Чтобы она работала правильно, нужно использовать &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;conventional commits&lt;/a&gt;. Хорошая практика, но нужно проверять каждый коммит, чтобы он соответствовал правилам. Себя я еще могу контролировать, но PR-ы от других людей могут нарушать условия. Поэтому я добавил джобу в github actions. Для локальной разработки можно использовать &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; и добавить туда проверку от commitizen, до него я использовал gitlint.&lt;/p&gt;&lt;p&gt;Плюсом к этому всему, &lt;a href=&#34;https://github.com/commitizen-tools/commitizen-action&#34;&gt;джоба в гитхабе от commitizen&lt;/a&gt; может по триггеру автоматечески создавать коммит, ставить тэг и, таким образом, можно быстро проводить релизы. Триггером может служить мердж в мастер или ручной запуск джобы. Работая над разными проектами, понимаешь какие вещи нужно автоматизировать и просто добавляешь их в шаблон.&lt;/p&gt;&lt;p&gt;Проблема с Github Actions, которая меня немного напрягает, что гитхаб не триггерит какую-либо джобу после изменений, созданных другой джобой. Например, если commitizen создает релизный тег через джобу, то другая джоба не запустится, которая должна триггериться на новые теги. Разработчики гитхаба специально сделали такое поведение, чтобы не было какого-то автоматического конвейра, который может сломаться, если не провалидировать автоматизацию. Забаный факт, но такое поведение есть только, если вы используете токен, выписанный гитхаб для пуша новых коммитов. Если создатите токен своего аккаунта и будете использовать его вместо дефолтного, то джобы будут триггериться друг другом.&lt;/p&gt;&lt;p&gt;Публикацию пакета в pypi провожу с помощью &lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Poetry — это менеджер зависимостей&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Тут тоже ничего сложного. Добавляю токен от pypi в github secrets. Рекомендую для каждой либы создавать отдельный токен, pypi так умеет. Далее по тригеру запускается джоба в github actions. Триггером обычно служит тэг новый версии, но вы можете запустить джобу руками. Далее poetry получает токен и делает всю работу по сборке и публикации пакета.&lt;/p&gt;&lt;h3 id=&#34;c-changelog-&#34;&gt;Cоздание changelog-а&lt;/h3&gt;&lt;p&gt;Про changelog можно почитать на &lt;a href=&#34;https://en.wikipedia.org/wiki/Changelog&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Я понимал, что changelog можно генерировать из сообщений коммитов в репе. Хотя, &lt;a href=&#34;https://keepachangelog.com/en/1.1.0/&#34;&gt;здесь (keepachangelog)&lt;/a&gt; написано обратное.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Don’t let your friends dump git logs into changelogs.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Я согласен с ними, но я думаю грамотное оформление каждого коммита, может упростить ведение журнала изменений, одно должно дополнять другое. В начале я использовал &lt;a href=&#34;https://github.com/pawamoy/git-changelog&#34;&gt;git-changelog&lt;/a&gt;, но для меня минусом стало, что инструмент генерирует весь журнал с нуля, то есть &#34;одно должно дополнять другое&#34; уже не работает. Также, в некоторых проектах, где часть коммитов не соответствовала формату conventional commits, не было информации между версиями вообще. git-changelog собирал журнал только по тегам. И, чтобы создать список изменений, сначала нужно создать тэг, а потом только сгенерить changelog. Это было не красиво, так как в тэге пропадала информация из файла changelog, она появлялась только в следующем коммите.&lt;/p&gt;&lt;p&gt;Попробовал auto-changelog, в котором можно было передавать версию через аргумент и включать измененный файл в тэг.&lt;/p&gt;&lt;p&gt;Со временем commitizen полностью вытеснил их. Как раз в нем изменения о новой версии добавляются в файл, а не перетираются все. Также он сначала добавляет изменения в changelog, только потом ставит тэг.&lt;/p&gt;&lt;h3 id=&#34;conventional-commits&#34;&gt;Conventional commits&lt;/h3&gt;&lt;p&gt;Тут коротко. Сразу добавляйте в проект эту практику. Самое главное добавьте проверку коммита в ci. Для этого следует все изменения заносить только через PR/MR. В своих проектах, где вы работаете один, вам поможет pre-commit, если вы любите сразу пушить в мастер ветку.&lt;/p&gt;&lt;h3 id=&#34;_4&#34;&gt;Сложная конфигурация проекта&lt;/h3&gt;&lt;p&gt;В одном из pull request-ов в свой репозиторий, один парень сказал, что конфигурация репы очень сложная для проекта такого размера. Сложно не согласиться с этим. Конечно, для меня это кажется простым, потому что я придумал и создал его. Поэтому нужно все документировать до мелочей в файле CONTRIBUTING.md вашего проекта. Люди не должны гадать как работать с вашим проектом, даже если в нем использованы популярные практики из мира разработки.&lt;/p&gt;&lt;h2 id=&#34;_5&#34;&gt;Итог&lt;/h2&gt;&lt;p&gt;В заключении, я рекомендую создавать и использовать шаблоны проектов у себя в команде или только для личных целей. По шаблону можно оценить каким практикам придерживается человек и на интервью или в резюме вы можете им поделиться, чтобы люди поняли вас лучше.&lt;/p&gt;&lt;h2 id=&#34;_6&#34;&gt;Полезные ссылки&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/daxartio/python-project-template&#34;&gt;мой шаблон проекта для python&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;conventionalcommits&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://keepachangelog.com/en/1.1.0/&#34;&gt;keepachangelog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/commitizen-tools/commitizen&#34;&gt;commitizen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cookiecutter.readthedocs.io/en/stable/&#34;&gt;cookiecutter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>https://daxartio.github.io/blog/2023/07/22/python-project-template/</link> <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><source url="https://daxartio.github.io/blog/feed_rss_created.xml">Software Architect</source><guid isPermaLink="true">https://daxartio.github.io/blog/2023/07/22/python-project-template/</guid> <enclosure url="https://daxartio.github.io/blog/assets/images/social/posts/2023-07-22-python-project-template.png" type="image/png" length="34680" /> </item> </channel></rss>